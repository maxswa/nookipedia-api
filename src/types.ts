/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/villagers': {
    /**
     * Villagers
     * @description This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     */
    get: {
      parameters: {
        query: {
          /** @description Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. */
          name?: string;
          /** @description Retrieve villagers of a certain species. */
          species?:
            | 'alligator'
            | 'anteater'
            | 'bear'
            | 'bird'
            | 'bull'
            | 'cat'
            | 'cub'
            | 'chicken'
            | 'cow'
            | 'deer'
            | 'dog'
            | 'duck'
            | 'eagle'
            | 'elephant'
            | 'frog'
            | 'goat'
            | 'gorilla'
            | 'hamster'
            | 'hippo'
            | 'horse'
            | 'koala'
            | 'kangaroo'
            | 'lion'
            | 'monkey'
            | 'mouse'
            | 'octopus'
            | 'ostrich'
            | 'penguin'
            | 'pig'
            | 'rabbit'
            | 'rhino'
            | 'sheep'
            | 'squirrel'
            | 'tiger'
            | 'wolf';
          /** @description Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'. */
          personality?:
            | 'lazy'
            | 'jock'
            | 'cranky'
            | 'smug'
            | 'normal'
            | 'peppy'
            | 'snooty'
            | 'sisterly';
          /** @description Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh&game=pc`. */
          game?: (
            | 'DNM'
            | 'AC'
            | 'E_PLUS'
            | 'WW'
            | 'CF'
            | 'NL'
            | 'WA'
            | 'NH'
            | 'FILM'
            | 'HHD'
            | 'PC'
          )[];
          /** @description Retrieve villagers born in a specific month. Value may be the month's name (`jan`, `january`) or the integer representing the month (`01`, `1`). */
          birthmonth?: string;
          /** @description Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31. */
          birthday?: string;
          /** @description When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null. */
          nhdetails?: string;
          /** @description When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of villagers. */
        200: {
          content: {
            'application/json': components['schemas']['Villager'][];
          };
        };
        /** @description One of the inputs (usually query parameters) has an invalid value. */
        400: {
          content: {
            'application/json': components['schemas']['Error400'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fish': {
    /**
     * All New Horizons fish
     * @description Get a list of all fish and their details in *New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the fish that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of fish in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of fish. */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fish/{fish}': {
    /**
     * Single New Horizons fish
     * @description Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the fish you wish to retrieve information about. */
          fish: string;
        };
      };
      responses: {
        /** @description A JSON object describing the fish. */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified fish. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs': {
    /**
     * All New Horizons bugs
     * @description Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the bug that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of bugs in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of bugs. */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs/{bug}': {
    /**
     * Single New Horizons bug
     * @description Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the bug you wish to retrieve information about. */
          bug: string;
        };
      };
      responses: {
        /** @description A JSON object describing the bug. */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified bug. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea': {
    /**
     * All New Horizons sea creatures
     * @description Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the sea creature that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of sea creatures in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of sea creatures. */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea/{sea_creature}': {
    /**
     * Single New Horizons sea creature
     * @description Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the sea creature you wish to retrieve information about. */
          sea_creature: string;
        };
      };
      responses: {
        /** @description A JSON object describing the sea creature. */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified sea creature. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/art': {
    /**
     * All New Horizons artwork
     * @description Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description When set to `true`, only artwork that has a fake will be returned. When set to `false`, only artwork without fakes will be returned. */
          hasfake?: string;
          /** @description When set to `true`, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of artwork. */
        200: {
          content: {
            'application/json': components['schemas']['NHArtwork'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/art/{artwork}': {
    /**
     * Single New Horizons artwork
     * @description Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the artwork you wish to retrieve information about. */
          artwork: string;
        };
      };
      responses: {
        /** @description A JSON object describing the artwork. */
        200: {
          content: {
            'application/json': components['schemas']['NHArtwork'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/recipes': {
    /**
     * All New Horizons recipes
     * @description Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify a material to only get recipes that use that material. You can specify `material` up to six times (no recipe uses more than six materials). */
          material?: string;
          /** @description When set to `true`, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of recipes. */
        200: {
          content: {
            'application/json': components['schemas']['NHRecipe'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/recipes/{item}': {
    /**
     * Single New Horizons recipe
     * @description Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the item you wish to retrieve recipe information about. */
          item: string;
        };
      };
      responses: {
        /** @description A JSON object describing the recipe. */
        200: {
          content: {
            'application/json': components['schemas']['NHRecipe'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/events': {
    /**
     * All New Horizons events
     * @description Get a list of all ongoing or upcoming events in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify a year of the event. */
          year?: string;
          /** @description Specify a month of the event. */
          month?: string;
          /** @description Specify a day of the event. */
          day?: string;
          /** @description When set to `true`, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of recipes. */
        200: {
          content: {
            'application/json': components['schemas']['NHEvent'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Bad request (often an invalid input). */
    Error400: {
      /**
       * @description A brief title describing the error.
       * @example Failed to identify the provided month filter.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example Provided month filter jonuary was not recognized as a valid month.
       */
      details?: string;
    };
    /** @description Unauthorized. */
    Error401: {
      /**
       * @description A brief title describing the error.
       * @example Failed to validate UUID.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example UUID is either missing or invalid; or, unspecified server occured.
       */
      details?: string;
    };
    /** @description Not found. */
    Error404: {
      /**
       * @description A brief title describing the error.
       * @example No data was found for the given query.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example MediaWiki Cargo request succeeded by nothing was returned for the parameters: {}
       */
      details?: string;
    };
    /** @description Internal server error. */
    Error500: {
      /**
       * @description A brief title describing the error.
       * @example API experienced a fatal error.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example Details unknown.
       */
      details?: string;
    };
    Villager: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Ribbot
       */
      url?: string;
      /**
       * @description Name of the villager.
       * @example Ribbot
       */
      name?: string;
      /**
       * @description A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
       * @example
       */
      alt_name?: string;
      /**
       * @description The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
       * @example bfbfbf
       */
      title_color?: string;
      /**
       * @description The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
       * @example 5e5e5e
       */
      text_color?: string;
      /**
       * @description The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
       * @example flg01
       */
      id?: string;
      /**
       * @description Image of the villager from the latest game the villager appeared in. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/9/94/Ribbot_NH.png
       */
      image_url?: string;
      /**
       * @description The villager's species.
       * @example Frog
       * @enum {string}
       */
      species?:
        | 'Alligator'
        | 'Anteater'
        | 'Bear'
        | 'Bird'
        | 'Bull'
        | 'Cat'
        | 'Cub'
        | 'Chicken'
        | 'Cow'
        | 'Deer'
        | 'Dog'
        | 'Duck'
        | 'Eagle'
        | 'Elephant'
        | 'Frog'
        | 'Goat'
        | 'Gorilla'
        | 'Hamster'
        | 'Hippo'
        | 'Horse'
        | 'Koala'
        | 'Kangaroo'
        | 'Lion'
        | 'Monkey'
        | 'Mouse'
        | 'Octopus'
        | 'Ostrich'
        | 'Penguin'
        | 'Pig'
        | 'Rabbit'
        | 'Rhino'
        | 'Sheep'
        | 'Squirrel'
        | 'Tiger'
        | 'Wolf';
      /**
       * @description The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
       * @example Jock
       * @enum {string}
       */
      personality?:
        | 'Cranky'
        | 'Jock'
        | 'Lazy'
        | 'Normal'
        | 'Peppy'
        | 'Sisterly'
        | 'Smug'
        | 'Snooty';
      /**
       * @description Gender of the villager. In *Animal Crossing*, only male and female are used.
       * @example Male
       * @enum {string}
       */
      gender?: 'Male' | 'Female';
      /**
       * @description Birthday of the villager in 'Month Day' form. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
       * @example February 13
       */
      birthday?: string;
      /**
       * @description The villager's astrological star sign.
       * @example Aquarius
       * @enum {string}
       */
      sign?:
        | 'Aries'
        | 'Taurus'
        | 'Gemini'
        | 'Cancer'
        | 'Leo'
        | 'Virgo'
        | 'Libra'
        | 'Scorpio'
        | 'Sagittarius'
        | 'Capricorn'
        | 'Aquarius'
        | 'Pisces';
      /**
       * @description The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
       * @example Never rest, never rust.
       */
      quote?: string;
      /**
       * @description The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
       * @example zzrrbbit
       */
      phrase?: string;
      /**
       * @description Any phrases used in previous *Animal Crossing* installations. May be empty.
       * @example [
       *   "toady"
       * ]
       */
      prev_phrases?: string[];
      /**
       * @description The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
       * @example Simple Parka
       */
      clothing?: string;
      /**
       * @description Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
       * @example false
       */
      islander?: boolean;
      /**
       * @description The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
       * @example DNM
       * @enum {string}
       */
      debut?:
        | 'DNM'
        | 'AC'
        | 'E_PLUS'
        | 'WW'
        | 'CF'
        | 'NL'
        | 'WA'
        | 'NH'
        | 'FILM'
        | 'HHD'
        | 'PC';
      /**
       * @description List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
       * @example [
       *   "DNM",
       *   "AC",
       *   "E_PLUS",
       *   "WW",
       *   "CF",
       *   "NL",
       *   "WA",
       *   "NH",
       *   "HHD",
       *   "PC"
       * ]
       */
      appearances?: (
        | 'DNM'
        | 'AC'
        | 'E_PLUS'
        | 'WW'
        | 'CF'
        | 'NL'
        | 'WA'
        | 'NH'
        | 'FILM'
        | 'HHD'
        | 'PC'
      )[];
      /** @description An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null. */
      nh_details?: {
        /**
         * @description Image of the villager from *New Horizons*.
         * @example https://dodo.ac/np/images/9/94/Ribbot_NH.png
         */
        image_url?: string;
        /**
         * @description The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
         * @example https://dodo.ac/np/images/0/03/RibbotPicACNH.png
         */
        photo_url?: string;
        /**
         * @description The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
         * @example https://dodo.ac/np/images/8/87/Ribbot_NH_Villager_Icon.png
         */
        icon_url?: string;
        /**
         * @description The villager's quote, as found on the back of their in-game photo.
         * @example Never rest, never rust.
         */
        quote?: string;
        /**
         * @description Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
         * @example B
         * @enum {string}
         */
        'sub-personality'?: 'A' | 'B';
        /**
         * @description The default phrase a villager will use when speaking to the player.
         * @example zzrrbbit
         */
        catchphrase?: string;
        /**
         * @description The default clothing that the villager wears.
         * @example Simple Parka
         */
        clothing?: string;
        /**
         * @description The variation of the clothing (usually a color).
         * @example Light Blue
         */
        clothing_variation?: string;
        /**
         * @description The villager's favorite clothing styles.
         * @example [
         *   "Simple",
         *   "Active"
         * ]
         */
        fav_styles?: string[];
        /**
         * @description The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
         * @example [
         *   "Blue",
         *   "Aqua"
         * ]
         */
        fav_colors?: string[];
        /**
         * @description The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
         * @example Fitness
         * @enum {string}
         */
        hobby?:
          | 'Education'
          | 'Fashion'
          | 'Fitness'
          | 'Music'
          | 'Nature'
          | 'Play';
        /**
         * @description A screenshot of the villager's house interior.
         * @example https://dodo.ac/np/images/8/86/House_of_Ribbot_NH.png
         */
        house_interior_url?: string;
        /**
         * @description A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
         * @example https://dodo.ac/np/images/4/42/House_of_Ribbot_NH_Model.png
         */
        house_exterior_url?: string;
        /**
         * @description The wallpaper in the villager's house.
         * @example Circuit-Board Wall
         */
        house_wallpaper?: string;
        /**
         * @description The flooring in the villager's house.
         * @example Future-Tech Flooring
         */
        house_flooring?: string;
        /**
         * @description The music in the villager's house.
         * @example K.K. Technopop
         */
        house_music?: string;
        /**
         * @description Any notes about the villager's music. If populated, this is usually "Does not contain a stereo initially", meaning that the villager's house will not play music unless provided with a stereo.
         * @example
         */
        house_music_note?: string;
      };
    };
    NHFish: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Cherry Salmon
       */
      url?: string;
      /**
       * @description Name of the fish.
       * @example Cherry Salmon
       */
      name?: string;
      /**
       * @description In-game fish number, marking position in the Critterpedia.
       * @example 27
       */
      number?: number;
      /**
       * @description Image of the fish. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/d/db/Cherry_Salmon_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the fish. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/c/c0/Cherry_Salmon_NH.png
       */
      render_url?: string;
      /**
       * @description The time(s) the fish is available. If all day, string will be `"All day"`.
       * @example 4 PM – 9 AM
       */
      time?: string;
      /**
       * @description Short descriptor of where the fish can be found.
       * @example River (clifftop)
       */
      location?: string;
      /**
       * @description The size of the fish's shadow.
       * @example Small
       * @enum {string}
       */
      shadow_size?:
        | 'X-Small'
        | 'Small'
        | 'Medium'
        | 'Medium w/Fin'
        | 'Large'
        | 'Large w/Fin'
        | 'X-Large'
        | 'XX-Large'
        | 'Long';
      /**
       * @description How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of fish the player has to have caught before this fish will start spawning.
       * @example 100
       */
      total_catch?: number;
      /**
       * @description The number of Bells the fish can be sold to Nook's store for.
       * @example 1000
       */
      sell_nook?: number;
      /**
       * @description The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.
       * @example 1500
       */
      sell_cj?: number;
      /**
       * Format: float
       * @description The width of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.
       * @example [
       *   "I caught a cherry salmon! It's the perfect topper for a marlin sundae!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the fish in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Mar – Jun",
         *     "time": "4 PM – 9 AM"
         *   },
         *   {
         *     "months": "Sep – Nov",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "4 PM – 9 AM",
         *   "4": "4 PM – 9 AM",
         *   "5": "4 PM – 9 AM",
         *   "6": "4 PM – 9 AM",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the fish is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Mar – Jun; Sep – Nov
         */
        months?: string;
        /**
         * @description An array of integers representing the months the fish is available in the Northern hemisphere.
         * @example [
         *   3,
         *   4,
         *   5,
         *   6,
         *   9,
         *   10,
         *   11
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the fish in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Sep – Dec",
         *     "time": "4 PM – 9 AM"
         *   },
         *   {
         *     "months": "Mar – May",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "4 PM – 9 AM",
         *   "4": "4 PM – 9 AM",
         *   "5": "4 PM – 9 AM",
         *   "6": "4 PM – 9 AM",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
          "2'"?: string;
          "3'"?: string;
        };
        /**
         * @description The months the fish is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Mar – May; Sep – Dec
         */
        months?: string;
        /**
         * @description An array of integers representing the months the fish is available in the Southern hemisphere.
         * @example [
         *   3,
         *   4,
         *   5,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
    };
    NHBug: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Grasshopper
       */
      url?: string;
      /**
       * @description Name of the bug.
       * @example Grasshopper
       */
      name?: string;
      /**
       * @description In-game bug number, marking position in the Critterpedia.
       * @example 19
       */
      number?: number;
      /**
       * @description Image of the bug. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/3/37/Grasshopper_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the bug. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/1/1d/Grasshopper_NH.png
       */
      render_url?: string;
      /**
       * @description The time(s) the bug is available. If all day, string will be `"All day"`.
       * @example 8 AM – 5 PM
       */
      time?: string;
      /**
       * @description Short descriptor of where the bug can be found.
       * @example On the ground
       */
      location?: string;
      /**
       * @description How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of bug the player has to have caught before this bug will start spawning.
       * @example 0
       */
      total_catch?: number;
      /**
       * @description The number of Bells the bug can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: number;
      /**
       * @description The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
       * @example 240
       */
      sell_flick?: number;
      /**
       * Format: float
       * @description The width of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
       * @example [
       *   "I caught a grasshopper! They're a grass act!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the bug in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Jul – Sep",
         *     "time": "8 AM – 5 PM"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "NA",
         *   "4": "NA",
         *   "5": "NA",
         *   "6": "NA",
         *   "7": "8 AM – 5 PM",
         *   "8": "8 AM – 5 PM",
         *   "9": "8 AM – 5 PM",
         *   "10": "NA",
         *   "11": "NA",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the bug is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Jul – Sep
         */
        months?: string;
        /**
         * @description An array of integers representing the months the bug is available in the Northern hemisphere.
         * @example [
         *   7,
         *   8,
         *   9
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the bug in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Jan – Mar",
         *     "time": "8 AM – 5 PM"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "8 AM – 5 PM",
         *   "2": "8 AM – 5 PM",
         *   "3": "8 AM – 5 PM",
         *   "4": "NA",
         *   "5": "NA",
         *   "6": "NA",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "NA",
         *   "10": "NA",
         *   "11": "NA",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the bug is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Jan – Mar
         */
        months?: string;
        /**
         * @description An array of integers representing the months the bug is available in the Southern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3
         * ]
         */
        months_array?: number[];
      };
    };
    NHSeaCreature: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Octopus_(fish)
       */
      url?: string;
      /**
       * @description Name of the sea creature.
       * @example Octopus
       */
      name?: string;
      /**
       * @description In-game sea creature number, marking position in the Critterpedia.
       * @example 20
       */
      number?: number;
      /**
       * @description Image of the sea creature. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/5/58/Octopus_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the bug. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/2/27/Octopus_NH.png
       */
      render_url?: string;
      /**
       * @description The time(s) the sea creature is available. If all day, string will be `"All day"`.
       * @example All day
       */
      time?: string;
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Medium
       * @enum {string}
       */
      shadow_size?: 'X-Small' | 'Small' | 'Medium' | 'Large' | 'X-Large';
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Slow
       * @enum {string}
       */
      shadow_movement?:
        | 'Stationary'
        | 'Very slow'
        | 'Slow'
        | 'Medium'
        | 'Fast'
        | 'Very fast';
      /**
       * @description How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of sea creatures the player has to have caught before this sea creature will start spawning.
       * @example 0
       */
      total_catch?: number;
      /**
       * @description The number of Bells the sea creature can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: number;
      /**
       * Format: float
       * @description The width of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.
       * @example [
       *   "I got an octopus! It can give four hugs at once!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the sea creature in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "All year",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "All day",
         *   "2": "All day",
         *   "3": "All day",
         *   "4": "All day",
         *   "5": "All day",
         *   "6": "All day",
         *   "7": "All day",
         *   "8": "All day",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "All day"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the sea creature is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Jul – Sep
         */
        months?: string;
        /**
         * @description An array of integers representing the months the sea creature is available in the Northern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3,
         *   4,
         *   5,
         *   6,
         *   7,
         *   8,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the sea creature in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "All year",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "All day",
         *   "2": "All day",
         *   "3": "All day",
         *   "4": "All day",
         *   "5": "All day",
         *   "6": "All day",
         *   "7": "All day",
         *   "8": "All day",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "All day"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the sea creature is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Jan – Mar
         */
        months?: string;
        /**
         * @description An array of integers representing the months the sea creature is available in the Southern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3,
         *   4,
         *   5,
         *   6,
         *   7,
         *   8,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
    };
    NHArtwork: {
      /**
       * @description Name of the artwork.
       * @example Academic Painting
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Academic_Painting
       */
      url?: string;
      /**
       * @description Image of the real artwork. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/e/e8/Academic_Painting_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Whether the artwork has a fake or not.
       * @example true
       */
      has_fake?: boolean;
      /**
       * @description Image of the fake artwork, if it exists.
       * @example https://dodo.ac/np/images/1/13/Academic_Painting_%28Forgery%29_NH_Icon.png
       */
      fake_image_url?: string;
      /**
       * @description The name of the real-life analog to the artwork.
       * @example Vitruvian Man
       */
      art_name?: string;
      /**
       * @description The author of the real-life analog to the artwork.
       * @example Leonardo da Vinci
       */
      author?: string;
      /**
       * @description The year that the real-life analog was made.
       * @example circa 1487
       */
      year?: string;
      /**
       * @description The art style of the artwork.
       * @example Pen and ink on paper
       */
      art_style?: string;
      /**
       * @description The description of the artwork.
       * @example This drawing is based on the &quot;ideal&quot; human-body ratio, as stated in &quot;De architectura.&quot; &quot;De architectura&quot; was a treatise by Vitruvius, an architect from the early 1st century BCE.
       */
      description?: string;
      /**
       * @description The number of Bells the artwork may be purchased for.
       * @example 4980
       */
      buy?: number;
      /**
       * @description The number of Bells the artwork can be sold to Nook's store for, when it is genuine.
       * @example 1245
       */
      sell?: number;
      /**
       * @description The availability of the artwork.
       * @example Jolly Redd's Treasure Trawler
       */
      availability?: string;
      /**
       * @description The description of the difference between real and fake, if there is one
       * @example If there is a coffee stain in the top right corner, it is fake. If there is no stain, it is genuine. The forgery has a key taped to the back of the canvas.
       */
      authenticity?: string;
      /**
       * Format: float
       * @description The width of the artwork.
       * @example 1
       */
      width?: number;
      /**
       * Format: float
       * @description The length of the artwork.
       * @example 1
       */
      length?: number;
    };
    NHRecipe: {
      /**
       * @description The name of the recipe.
       * @example Flimsy Axe
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Flimsy_Axe_(New_Horizons)
       */
      url?: string;
      /**
       * @description Image of the item the recipe crafts. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/a/ac/Flimsy_Axe_NH_DIY_Icon.png
       */
      image_url?: string;
      /**
       * @description The unique in-game ID of the recipe.
       * @example 100
       */
      serial_id?: number;
      /**
       * @description An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).
       * @example [
       *   {
       *     "price": 280,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description The number of Bells the sea creature can be sold to Nook's store for.
       * @example 200
       */
      sell?: number;
      /**
       * @description How many recipes the player has to have learned to unlock this one.
       * @example 0
       */
      recipes_to_unlock?: number;
      /**
       * @description Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Tom Nook",
       *     "note": "Obtained through Tom Nook's DIY Workshop at the beginning of the game."
       *   },
       *   {
       *     "from": "Nook's Cranny",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description The list of materials required to craft the item.
       * @example [
       *   {
       *     "name": "Tree Branch",
       *     "count": 5
       *   },
       *   {
       *     "name": "Stone",
       *     "count": 1
       *   }
       * ]
       */
      materials?: {
        name?: string;
        count?: number;
      }[];
    };
    NHEvent: {
      /**
       * @description The date of the event.
       * @example "2021-05-01T00:00:00.000Z"
       */
      date?: Record<string, never>;
      /**
       * @description The description of the event.
       * @example May Day event begins
       */
      event?: string;
      /**
       * @description The article name of the event.
       * @example May Day
       */
      event_url?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
