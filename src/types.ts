/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/nh/fish': {
    /**
     * All New Horizons fish
     * @description Get a list of all fish and their details in *Animal Crossing: New Horizons*. Note that while cached, this endpoint will be very responsive; however, hitting the endpoint in between cache refreshes can result in a response time of 5 to 15 seconds.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the fish that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the number (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of fish in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. This parameter is generally not recommended unless you absolutely need it, as each returned thumbnail link with a custom size requires an additional network call, which can result in a long response time if calling this endpoint in between cache refreshes. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of fish */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fish/{fish}': {
    /**
     * Single New Horizons fish
     * @description Optional extended description in CommonMark or HTML.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the fish you wish to retrieve information about. */
          fish: string;
        };
      };
      responses: {
        /** @description A JSON object describing the fish. */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified fish. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs': {
    /**
     * All New Horizons bugs
     * @description Get a list of all bugs and their details in *Animal Crossing: New Horizons*. Note that while cached, this endpoint will be very responsive; however, hitting the endpoint in between cache refreshes can result in a response time of 5 to 15 seconds.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the bug that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the number (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of bugs in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. This parameter is generally not recommended unless you absolutely need it, as each returned thumbnail link with a custom size requires an additional network call, which can result in a long response time if calling this endpoint in between cache refreshes. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of bug */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs/{bug}': {
    /**
     * Single New Horizons bug
     * @description Optional extended description in CommonMark or HTML.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the bug you wish to retrieve information about. */
          bug: string;
        };
      };
      responses: {
        /** @description A JSON object describing the bug. */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified bug. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea': {
    /**
     * All NH sea creatures
     * @description Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*. Note that while cached, this endpoint will be very responsive; however, hitting the endpoint in between cache refreshes can result in a response time of 5 to 15 seconds.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the sea creature that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the number (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of sea creatures in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. This parameter is generally not recommended unless you absolutely need it, as each returned thumbnail link with a custom size requires an additional network call, which can result in a long response time if calling this endpoint in between cache refreshes. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of sea creature */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea/{sea_creature}': {
    /**
     * Single NH sea creature
     * @description Optional extended description in CommonMark or HTML.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This header is required as good practice, but is not currently utilized by the API as there is only one version at the moment. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the sea creature you wish to retrieve information about. */
          sea_creature: string;
        };
      };
      responses: {
        /** @description A JSON object describing the sea creature. */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified sea creature. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error401: {
      /**
       * @description A brief title describing the error.
       * @example Failed to validate UUID.
       */
      title?: string;
      /**
       * @description UUID is either missing or invalid; or, unspecified server occured.
       * @example Provided month filter currentd was not recognized as a valid month.
       */
      details?: string;
    };
    Error404: {
      /**
       * @description A brief title describing the error.
       * @example No data was found for the given query.
       */
      title?: string;
      /**
       * @description UUID is either missing or invalid; or, unspecified server occured.
       * @example MediaWiki Cargo request succeeded by nothing was returned for the parameters: {}
       */
      details?: string;
    };
    Error500: {
      /**
       * @description A brief title describing the error.
       * @example Failed to identify the provided month filter.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example Provided month filter currentd was not recognized as a valid month.
       */
      details?: string;
    };
    NHFish: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Cherry Salmon
       */
      url?: string;
      /**
       * @description Name of the fish.
       * @example Cherry Salmon
       */
      name?: string;
      /**
       * @description In-game fish number, marking position in the Critterpedia.
       * @example 27
       */
      number?: string;
      /**
       * @description Image of the fish. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/d/db/Cherry_Salmon_NH_Icon.png
       */
      image?: string;
      /**
       * @description The catchphrase the player says after catching the fish.
       * @example I caught a cherry salmon! It's the perfect topper for a marlin sundae!
       */
      catchphrase?: string;
      /**
       * @description An alternative catchphrase that the player may say after catching the critter under certain conditions (such as catching a squid when it is raining). Note that the vast majority of critters do not have a second catchphrase.
       * @example
       */
      catchphrase2?: string;
      /**
       * @description An alternative catchphrase that the player may say after catching the critter under certain conditions (such as catching a squid when it is raining). Note that the vast majority of critters do not have a third catchphrase.
       * @example
       */
      catchphrase3?: string;
      /**
       * @description The time(s) the fish is available. If all day, string will be `"All day"`.
       * @example 4 PM – 9 AM
       */
      time?: string;
      /**
       * @description Short descriptor of where the fish can be found.
       * @example River (clifftop)
       */
      location?: string;
      /**
       * @description The size of the fish's shadow.
       * @example Small
       * @enum {string}
       */
      shadow_size?:
        | 'X-Small'
        | 'Small'
        | 'Medium'
        | 'Medium w/Fin'
        | 'Large'
        | 'Large w/Fin'
        | 'X-Large'
        | 'XX-Large'
        | 'Long';
      /**
       * @description How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of fish the player has to have caught before this fish will start spawning.
       * @example 100
       */
      total_catch?: string;
      /**
       * @description The number of Bells the fish can be sold to Nook's store for.
       * @example 1000
       */
      sell_nook?: string;
      /**
       * @description The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.
       * @example 1500
       */
      sell_cj?: string;
      /**
       * @description The width of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_width?: string;
      /**
       * @description The length of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_length?: string;
      /**
       * @description The months the fish is available for in the Northern hemisphere. If all year, value will be `"All year"`.
       * @example Mar – Jun; Sep – Nov
       */
      n_availability?: string;
      /**
       * @description The months the fish is available for in the Southern hemisphere. If all year, value will be `"All year"`.
       * @example Mar – May; Sep – Dec
       */
      s_availability?: string;
      /**
       * @description An array of string integers representing the months the fish is available in the Northern hemisphere.
       * @example [
       *   "3",
       *   "4",
       *   "5",
       *   "6",
       *   "9",
       *   "10",
       *   "11"
       * ]
       */
      n_availability_array?: string[];
      /**
       * @description An array of string integers representing the months the fish is available in the Southern hemisphere.
       * @example [
       *   "3",
       *   "4",
       *   "5",
       *   "9",
       *   "10",
       *   "11",
       *   "12"
       * ]
       */
      s_availability_array?: string[];
    };
    NHBug: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Grasshopper
       */
      url?: string;
      /**
       * @description Name of the bug.
       * @example Grasshopper
       */
      name?: string;
      /**
       * @description In-game bug number, marking position in the Critterpedia.
       * @example 19
       */
      number?: string;
      /**
       * @description Image of the bug. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/3/37/Grasshopper_NH_Icon.png
       */
      image?: string;
      /**
       * @description The catchphrase the player says after catching the bug.
       * @example I caught a grasshopper! They're a grass act!
       */
      catchphrase?: string;
      /**
       * @description An alternative catchphrase that the player may say after catching the critter under certain conditions (such as catching a squid when it is raining). Note that the vast majority of critters do not have a second catchphrase.
       * @example
       */
      catchphrase2?: string;
      /**
       * @description The time(s) the bug is available. If all day, string will be `"All day"`.
       * @example 8 AM – 5 PM
       */
      time?: string;
      /**
       * @description Short descriptor of where the bug can be found.
       * @example On the ground
       */
      location?: string;
      /**
       * @description How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of bug the player has to have caught before this bug will start spawning.
       * @example 0
       */
      total_catch?: string;
      /**
       * @description The number of Bells the bug can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: string;
      /**
       * @description The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
       * @example 240
       */
      sell_flick?: string;
      /**
       * @description The width of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_width?: string;
      /**
       * @description The length of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_length?: string;
      /**
       * @description The months the bug is available for in the Northern hemisphere. If all year, value will be `"All year"`.
       * @example Jul – Sep
       */
      n_availability?: string;
      /**
       * @description The months the bug is available for in the Southern hemisphere. If all year, value will be `"All year"`.
       * @example Jan – Mar
       */
      s_availability?: string;
      /**
       * @description An array of string integers representing the months the bug is available in the Northern hemisphere.
       * @example [
       *   "7",
       *   "8",
       *   "9"
       * ]
       */
      n_availability_array?: string[];
      /**
       * @description An array of string integers representing the months the bug is available in the Southern hemisphere.
       * @example [
       *   "1",
       *   "2",
       *   "3"
       * ]
       */
      s_availability_array?: string[];
    };
    NHSeaCreature: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Octopus_(fish)
       */
      url?: string;
      /**
       * @description Name of the sea creature.
       * @example Octopus
       */
      name?: string;
      /**
       * @description In-game sea creature number, marking position in the Critterpedia.
       * @example 20
       */
      number?: string;
      /**
       * @description Image of the sea creature. dodo.ac is Nookipedia's CDN server.
       * @example https://dodo.ac/np/images/5/58/Octopus_NH_Icon.png
       */
      image?: string;
      /**
       * @description The catchphrase the player says after catching the sea creature.
       * @example I got an octopus! It can give four hugs at once!
       */
      catchphrase?: string;
      /**
       * @description An alternative catchphrase that the player may say after catching the critter under certain conditions (such as catching a squid when it is raining). Note that the vast majority of critters do not have a second catchphrase.
       * @example
       */
      catchphrase2?: string;
      /**
       * @description The time(s) the sea creature is available. If all day, string will be `"All day"`.
       * @example All day
       */
      time?: string;
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Medium
       * @enum {string}
       */
      shadow_size?: 'X-Small' | 'Small' | 'Medium' | 'Large' | 'X-Large';
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Slow
       * @enum {string}
       */
      shadow_movement?:
        | 'Stationary'
        | 'Very slow'
        | 'Slow'
        | 'Medium'
        | 'Fast'
        | 'Very fast';
      /**
       * @description How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of sea creatures the player has to have caught before this sea creature will start spawning.
       * @example 0
       */
      total_catch?: string;
      /**
       * @description The number of Bells the sea creature can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: string;
      /**
       * @description The width of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_width?: string;
      /**
       * @description The length of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_length?: string;
      /**
       * @description The months the sea creature is available for in the Northern hemisphere. If all year, value will be `"All year"`.
       * @example Jul – Sep
       */
      n_availability?: string;
      /**
       * @description The months the sea creature is available for in the Southern hemisphere. If all year, value will be `"All year"`.
       * @example Jan – Mar
       */
      s_availability?: string;
      /**
       * @description An array of string integers representing the months the sea creature is available in the Northern hemisphere.
       * @example [
       *   "1",
       *   "2",
       *   "3",
       *   "4",
       *   "5",
       *   "6",
       *   "7",
       *   "8",
       *   "9",
       *   "10",
       *   "11",
       *   "12"
       * ]
       */
      n_availability_array?: string[];
      /**
       * @description An array of string integers representing the months the sea creature is available in the Southern hemisphere.
       * @example [
       *   "1",
       *   "2",
       *   "3",
       *   "4",
       *   "5",
       *   "6",
       *   "7",
       *   "8",
       *   "9",
       *   "10",
       *   "11",
       *   "12"
       * ]
       */
      s_availability_array?: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
