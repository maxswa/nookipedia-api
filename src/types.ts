/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/villagers': {
    /**
     * Villagers
     * @description This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     */
    get: {
      parameters: {
        query: {
          /** @description Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. */
          name?: string;
          /** @description Retrieve villagers of a certain species. */
          species?:
            | 'alligator'
            | 'anteater'
            | 'bear'
            | 'bear cub'
            | 'bird'
            | 'bull'
            | 'cat'
            | 'cub'
            | 'chicken'
            | 'cow'
            | 'deer'
            | 'dog'
            | 'duck'
            | 'eagle'
            | 'elephant'
            | 'frog'
            | 'goat'
            | 'gorilla'
            | 'hamster'
            | 'hippo'
            | 'horse'
            | 'koala'
            | 'kangaroo'
            | 'lion'
            | 'monkey'
            | 'mouse'
            | 'octopus'
            | 'ostrich'
            | 'penguin'
            | 'pig'
            | 'rabbit'
            | 'rhino'
            | 'rhinoceros'
            | 'sheep'
            | 'squirrel'
            | 'tiger'
            | 'wolf';
          /** @description Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'. */
          personality?:
            | 'big sister'
            | 'cranky'
            | 'jock'
            | 'lazy'
            | 'normal'
            | 'peppy'
            | 'sisterly'
            | 'smug'
            | 'snooty';
          /** @description Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh&game=pc`. */
          game?: (
            | 'DNM'
            | 'AC'
            | 'E_PLUS'
            | 'WW'
            | 'CF'
            | 'NL'
            | 'WA'
            | 'NH'
            | 'FILM'
            | 'HHD'
            | 'PC'
          )[];
          /** @description Retrieve villagers born in a specific month. Value may be the month's name (`jan`, `january`) or the integer representing the month (`01`, `1`). */
          birthmonth?: string;
          /** @description Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31. */
          birthday?: string;
          /** @description When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null. */
          nhdetails?: string;
          /** @description When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of villagers. */
        200: {
          content: {
            'application/json': components['schemas']['Villager'][];
          };
        };
        /** @description One of the inputs (usually query parameters) has an invalid value. */
        400: {
          content: {
            'application/json': components['schemas']['Error400'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fish': {
    /**
     * All New Horizons fish
     * @description Get a list of all fish and their details in *New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the fish that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of fish in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of fish. */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fish/{fish}': {
    /**
     * Single New Horizons fish
     * @description Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the fish you wish to retrieve information about. */
          fish: string;
        };
      };
      responses: {
        /** @description A JSON object describing the fish. */
        200: {
          content: {
            'application/json': components['schemas']['NHFish'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified fish. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs': {
    /**
     * All New Horizons bugs
     * @description Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the bug that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of bugs in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of bugs. */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/bugs/{bug}': {
    /**
     * Single New Horizons bug
     * @description Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the bug you wish to retrieve information about. */
          bug: string;
        };
      };
      responses: {
        /** @description A JSON object describing the bug. */
        200: {
          content: {
            'application/json': components['schemas']['NHBug'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified bug. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea': {
    /**
     * All New Horizons sea creatures
     * @description Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Retrive only the sea creature that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month. */
          month?: string;
          /** @description When set to `true`, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of sea creatures in a given month but not all their respective details. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of sea creatures. */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/sea/{sea_creature}': {
    /**
     * Single New Horizons sea creature
     * @description Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the sea creature you wish to retrieve information about. */
          sea_creature: string;
        };
      };
      responses: {
        /** @description A JSON object describing the sea creature. */
        200: {
          content: {
            'application/json': components['schemas']['NHSeaCreature'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description Could not find the specified sea creature. */
        404: {
          content: {
            'application/json': components['schemas']['Error404'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/events': {
    /**
     * All New Horizons events
     * @description Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as `YYYY-MM-DD` or `Month Day, Year`, as well as `today` to retrieve the current day's events (UTC time). */
          date?: string;
          /** @description Specify the year to retrieve events for. Must be the current or next year. */
          year?: string;
          /** @description Specify the month to retrieve events for (accepts multiple formats, such as `Oct`, `October`, or `10`). Most likely want to use alongside `year`, otherwise events in both the current and next year are returned. */
          month?: string;
          /** @description Specify the day of the month to retrieve events for. */
          day?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of events. */
        200: {
          content: {
            'application/json': components['schemas']['NHEvent'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/art': {
    /**
     * All New Horizons artwork
     * @description Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description When set to `true`, only artwork that has a fake will be returned. When set to `false`, only artwork without fakes will be returned. */
          hasfake?: string;
          /** @description When set to `true`, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of artwork. */
        200: {
          content: {
            'application/json': components['schemas']['NHArtwork'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/art/{artwork}': {
    /**
     * Single New Horizons artwork
     * @description Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the artwork you wish to retrieve information about. */
          artwork: string;
        };
      };
      responses: {
        /** @description A JSON object describing the artwork. */
        200: {
          content: {
            'application/json': components['schemas']['NHArtwork'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/furniture': {
    /**
     * All New Horizons furniture
     * @description Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted). */
          category?: 'Housewares' | 'Miscellaneous' | 'Wall-mounted';
          /** @description Return furniture that matches the provided colors (may specify one or two colors). */
          color?: (
            | 'Aqua'
            | 'Beige'
            | 'Black'
            | 'Blue'
            | 'Brown'
            | 'Colorful'
            | 'Gray'
            | 'Green'
            | 'Orange'
            | 'Pink'
            | 'Purple'
            | 'Red'
            | 'White'
            | 'Yellow'
          )[];
          /** @description When set to `true`, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of furniture. */
        200: {
          content: {
            'application/json': components['schemas']['NHFurniture'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/furniture/{furniture}': {
    /**
     * Single New Horizons furniture
     * @description Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the furniture you wish to retrieve information about. */
          furniture: string;
        };
      };
      responses: {
        /** @description A JSON object describing the furniture. */
        200: {
          content: {
            'application/json': components['schemas']['NHFurniture'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/clothing': {
    /**
     * All New Horizons clothing
     * @description Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the category of clothing to return. */
          category?:
            | 'Tops'
            | 'Bottoms'
            | 'Dress-up'
            | 'Headwear'
            | 'Accessories'
            | 'Socks'
            | 'Shoes'
            | 'Bags'
            | 'Umbrellas';
          /** @description Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers. */
          color?: (
            | 'Aqua'
            | 'Beige'
            | 'Black'
            | 'Blue'
            | 'Brown'
            | 'Colorful'
            | 'Gray'
            | 'Green'
            | 'Orange'
            | 'Pink'
            | 'Purple'
            | 'Red'
            | 'White'
            | 'Yellow'
          )[];
          /** @description Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers. */
          style?: (
            | 'Active'
            | 'Cool'
            | 'Cute'
            | 'Elegant'
            | 'Gorgeous'
            | 'Simple'
          )[];
          /** @description Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island. */
          labeltheme?:
            | 'Comfy'
            | 'Everyday'
            | 'Fairy tale'
            | 'Formal'
            | 'Goth'
            | 'Outdoorsy'
            | 'Party'
            | 'Sporty'
            | 'Theatrical'
            | 'Vacation'
            | 'Work';
          /** @description When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of clothing. */
        200: {
          content: {
            'application/json': components['schemas']['NHClothing'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/clothing/{clothing}': {
    /**
     * Single New Horizons clothing
     * @description Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the clothing you wish to retrieve information about. */
          clothing: string;
        };
      };
      responses: {
        /** @description A JSON object describing the clothing. */
        200: {
          content: {
            'application/json': components['schemas']['NHClothing'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/interior': {
    /**
     * All New Horizons interior items
     * @description Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Return furniture that matches the provided colors (may specify one or two colors). */
          color?: (
            | 'Aqua'
            | 'Beige'
            | 'Black'
            | 'Blue'
            | 'Brown'
            | 'Colorful'
            | 'Gray'
            | 'Green'
            | 'Orange'
            | 'Pink'
            | 'Purple'
            | 'Red'
            | 'White'
            | 'Yellow'
          )[];
          /** @description When set to `true`, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of interior items. */
        200: {
          content: {
            'application/json': components['schemas']['NHInterior'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/interior/{item}': {
    /**
     * Single New Horizons interior item
     * @description Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Return furniture that matches the provided colors (may specify one or two colors). */
          color?: (
            | 'Aqua'
            | 'Beige'
            | 'Black'
            | 'Blue'
            | 'Brown'
            | 'Colorful'
            | 'Gray'
            | 'Green'
            | 'Orange'
            | 'Pink'
            | 'Purple'
            | 'Red'
            | 'White'
            | 'Yellow'
          )[];
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the interior item you wish to retrieve information about. */
          item: string;
        };
      };
      responses: {
        /** @description A JSON object describing the interior item. */
        200: {
          content: {
            'application/json': components['schemas']['NHInterior'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/tools': {
    /**
     * All New Horizons tools
     * @description Get a list of all tools and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description When set to `true`, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of interior items. */
        200: {
          content: {
            'application/json': components['schemas']['NHTool'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/tools/{tool}': {
    /**
     * Single New Horizons tool
     * @description Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the interior item you wish to retrieve information about. */
          tool: string;
        };
      };
      responses: {
        /** @description A JSON object describing the tool. */
        200: {
          content: {
            'application/json': components['schemas']['NHTool'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/photos': {
    /**
     * All New Horizons photos and posters
     * @description Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of photos and posters. */
        200: {
          content: {
            'application/json': components['schemas']['NHPhoto'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/photos/{item}': {
    /**
     * Single New Horizons photo or poster
     * @description Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the photo or poster you wish to retrieve information about. */
          item: string;
        };
      };
      responses: {
        /** @description A JSON object describing the photo or poster. */
        200: {
          content: {
            'application/json': components['schemas']['NHPhoto'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/items': {
    /**
     * Miscellaneous New Horizons items
     * @description Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of items. */
        200: {
          content: {
            'application/json': components['schemas']['NHItem'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/items/{item}': {
    /**
     * Single New Horizons miscellaneous item
     * @description Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the interior item you wish to retrieve information about. */
          item: string;
        };
      };
      responses: {
        /** @description A JSON object describing the item. */
        200: {
          content: {
            'application/json': components['schemas']['NHItem'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/recipes': {
    /**
     * All New Horizons recipes
     * @description Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify a material to only get recipes that use that material. You can specify `material` up to six times (no recipe uses more than six materials). */
          material?: string;
          /** @description When set to `true`, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. */
          excludedetails?: string;
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of recipes. */
        200: {
          content: {
            'application/json': components['schemas']['NHRecipe'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/recipes/{item}': {
    /**
     * Single New Horizons recipe
     * @description Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the item you wish to retrieve recipe information about. */
          item: string;
        };
      };
      responses: {
        /** @description A JSON object describing the recipe. */
        200: {
          content: {
            'application/json': components['schemas']['NHRecipe'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/individuals': {
    /**
     * All New Horizons fossils
     * @description Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of individual fossils. */
        200: {
          content: {
            'application/json': components['schemas']['NHIndividualFossil'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/individuals/{fossil}': {
    /**
     * Single New Horizons fossil
     * @description Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the individual fossil you wish to retrieve fossil information about. */
          fossil: string;
        };
      };
      responses: {
        /** @description A JSON object describing the individual fossil. */
        200: {
          content: {
            'application/json': components['schemas']['NHIndividualFossil'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/groups': {
    /**
     * All New Horizons fossil groups
     * @description Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of fossil groups. */
        200: {
          content: {
            'application/json': components['schemas']['NHFossilGroup'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/groups/{fossil_group}': {
    /**
     * Single New Horizons fossil group
     * @description Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the fossil group you wish to retrieve information about. */
          fossil_group: string;
        };
      };
      responses: {
        /** @description A JSON object describing the fossil group. */
        200: {
          content: {
            'application/json': components['schemas']['NHFossilGroup'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/all': {
    /**
     * All New Horizons fossil groups or individual fossil
     * @description Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
      };
      responses: {
        /** @description A JSON array of fossil groups. */
        200: {
          content: {
            'application/json': components['schemas']['NHFossilGroupWithIndividualFossilsNoMatched'][];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
  '/nh/fossils/all/{fossil}': {
    /**
     * Single New Horizons fossil group with individual fossils
     * @description Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
     */
    get: {
      parameters: {
        query: {
          /** @description Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. */
          thumbsize?: number;
        };
        header: {
          /** @description Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. */
          'X-API-KEY': string;
          /** @description The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. */
          'Accept-Version': string;
        };
        path: {
          /** @description The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned. */
          fossil: string;
        };
      };
      responses: {
        /** @description A JSON object describing the fossil group. */
        200: {
          content: {
            'application/json': components['schemas']['NHFossilGroupWithIndividualFossils'];
          };
        };
        /** @description Failed to authenticate user from `X-API-KEY`. */
        401: {
          content: {
            'application/json': components['schemas']['Error401'];
          };
        };
        /** @description There was an error fetching the requested data. */
        500: {
          content: {
            'application/json': components['schemas']['Error500'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Bad request (often an invalid input). */
    Error400: {
      /**
       * @description A brief title describing the error.
       * @example Failed to identify the provided month filter.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example Provided month filter jonuary was not recognized as a valid month.
       */
      details?: string;
    };
    /** @description Unauthorized. */
    Error401: {
      /**
       * @description A brief title describing the error.
       * @example Failed to validate UUID.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example UUID is either missing or invalid; or, unspecified server occured.
       */
      details?: string;
    };
    /** @description Not found. */
    Error404: {
      /**
       * @description A brief title describing the error.
       * @example No data was found for the given query.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example MediaWiki Cargo request succeeded by nothing was returned for the parameters: {}
       */
      details?: string;
    };
    /** @description Internal server error. */
    Error500: {
      /**
       * @description A brief title describing the error.
       * @example API experienced a fatal error.
       */
      title?: string;
      /**
       * @description A more in-depth description of the issue, including parameters and/or error text when available.
       * @example Details unknown.
       */
      details?: string;
    };
    Villager: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Ribbot
       */
      url?: string;
      /**
       * @description Name of the villager.
       * @example Ribbot
       */
      name?: string;
      /**
       * @description A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
       * @example
       */
      alt_name?: string;
      /**
       * @description The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
       * @example bfbfbf
       */
      title_color?: string;
      /**
       * @description The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
       * @example 5e5e5e
       */
      text_color?: string;
      /**
       * @description The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
       * @example flg01
       */
      id?: string;
      /**
       * @description Image of the villager from the latest game the villager appeared in.
       * @example https://dodo.ac/np/images/9/94/Ribbot_NH.png
       */
      image_url?: string;
      /**
       * @description The villager's species.
       * @example Frog
       * @enum {string}
       */
      species?:
        | 'Alligator'
        | 'Anteater'
        | 'Bear'
        | 'Bear cub'
        | 'Bird'
        | 'Bull'
        | 'Cat'
        | 'Chicken'
        | 'Cow'
        | 'Deer'
        | 'Dog'
        | 'Duck'
        | 'Eagle'
        | 'Elephant'
        | 'Frog'
        | 'Goat'
        | 'Gorilla'
        | 'Hamster'
        | 'Hippo'
        | 'Horse'
        | 'Koala'
        | 'Kangaroo'
        | 'Lion'
        | 'Monkey'
        | 'Mouse'
        | 'Octopus'
        | 'Ostrich'
        | 'Penguin'
        | 'Pig'
        | 'Rabbit'
        | 'Rhinoceros'
        | 'Sheep'
        | 'Squirrel'
        | 'Tiger'
        | 'Wolf';
      /**
       * @description The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
       * @example Jock
       * @enum {string}
       */
      personality?:
        | 'Big sister'
        | 'Cranky'
        | 'Jock'
        | 'Lazy'
        | 'Normal'
        | 'Peppy'
        | 'Smug'
        | 'Snooty';
      /**
       * @description Gender of the villager. In *Animal Crossing*, only male and female are used.
       * @example Male
       * @enum {string}
       */
      gender?: 'Male' | 'Female';
      /**
       * @description Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
       * @example February
       */
      birthday_month?: string;
      /**
       * @description Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
       * @example 13
       */
      birthday_day?: string;
      /**
       * @description The villager's astrological star sign.
       * @example Aquarius
       * @enum {string}
       */
      sign?:
        | 'Aries'
        | 'Taurus'
        | 'Gemini'
        | 'Cancer'
        | 'Leo'
        | 'Virgo'
        | 'Libra'
        | 'Scorpio'
        | 'Sagittarius'
        | 'Capricorn'
        | 'Aquarius'
        | 'Pisces';
      /**
       * @description The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
       * @example Never rest, never rust.
       */
      quote?: string;
      /**
       * @description The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
       * @example zzrrbbit
       */
      phrase?: string;
      /**
       * @description Any phrases used in previous *Animal Crossing* installations. May be empty.
       * @example [
       *   "toady"
       * ]
       */
      prev_phrases?: string[];
      /**
       * @description The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
       * @example Simple Parka
       */
      clothing?: string;
      /**
       * @description Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
       * @example false
       */
      islander?: boolean;
      /**
       * @description The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
       * @example DNM
       * @enum {string}
       */
      debut?:
        | 'DNM'
        | 'AC'
        | 'E_PLUS'
        | 'WW'
        | 'CF'
        | 'NL'
        | 'WA'
        | 'NH'
        | 'FILM'
        | 'HHD'
        | 'PC';
      /**
       * @description List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
       * @example [
       *   "DNM",
       *   "AC",
       *   "E_PLUS",
       *   "WW",
       *   "CF",
       *   "NL",
       *   "WA",
       *   "NH",
       *   "HHD",
       *   "PC"
       * ]
       */
      appearances?: (
        | 'DNM'
        | 'AC'
        | 'E_PLUS'
        | 'WW'
        | 'CF'
        | 'NL'
        | 'WA'
        | 'NH'
        | 'FILM'
        | 'HHD'
        | 'PC'
      )[];
      /** @description An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null. */
      nh_details?: {
        /**
         * @description Image of the villager from *New Horizons*.
         * @example https://dodo.ac/np/images/9/94/Ribbot_NH.png
         */
        image_url?: string;
        /**
         * @description The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
         * @example https://dodo.ac/np/images/0/03/RibbotPicACNH.png
         */
        photo_url?: string;
        /**
         * @description The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
         * @example https://dodo.ac/np/images/8/87/Ribbot_NH_Villager_Icon.png
         */
        icon_url?: string;
        /**
         * @description The villager's quote, as found on the back of their in-game photo.
         * @example Never rest, never rust.
         */
        quote?: string;
        /**
         * @description Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
         * @example B
         * @enum {string}
         */
        'sub-personality'?: 'A' | 'B';
        /**
         * @description The default phrase a villager will use when speaking to the player.
         * @example zzrrbbit
         */
        catchphrase?: string;
        /**
         * @description The default clothing that the villager wears.
         * @example Simple Parka
         */
        clothing?: string;
        /**
         * @description The variation of the clothing (usually a color).
         * @example Light Blue
         */
        clothing_variation?: string;
        /**
         * @description The villager's favorite clothing styles.
         * @example [
         *   "Simple",
         *   "Active"
         * ]
         */
        fav_styles?: string[];
        /**
         * @description The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
         * @example [
         *   "Blue",
         *   "Aqua"
         * ]
         */
        fav_colors?: string[];
        /**
         * @description The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
         * @example Fitness
         * @enum {string}
         */
        hobby?:
          | 'Education'
          | 'Fashion'
          | 'Fitness'
          | 'Music'
          | 'Nature'
          | 'Play';
        /**
         * @description A screenshot of the villager's house interior.
         * @example https://dodo.ac/np/images/8/86/House_of_Ribbot_NH.png
         */
        house_interior_url?: string;
        /**
         * @description A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
         * @example https://dodo.ac/np/images/4/42/House_of_Ribbot_NH_Model.png
         */
        house_exterior_url?: string;
        /**
         * @description The wallpaper in the villager's house.
         * @example Circuit-Board Wall
         */
        house_wallpaper?: string;
        /**
         * @description The flooring in the villager's house.
         * @example Future-Tech Flooring
         */
        house_flooring?: string;
        /**
         * @description The music in the villager's house.
         * @example K.K. Technopop
         */
        house_music?: string;
        /**
         * @description Any notes about the villager's music. If populated, this is usually "Does not contain a stereo initially", meaning that the villager's house will not play music unless provided with a stereo.
         * @example
         */
        house_music_note?: string;
      };
    };
    NHFish: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Cherry Salmon
       */
      url?: string;
      /**
       * @description Name of the fish.
       * @example Cherry Salmon
       */
      name?: string;
      /**
       * @description In-game fish number, marking position in the Critterpedia.
       * @example 27
       */
      number?: number;
      /**
       * @description Image of the fish.
       * @example https://dodo.ac/np/images/d/db/Cherry_Salmon_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the fish.
       * @example https://dodo.ac/np/images/c/c0/Cherry_Salmon_NH.png
       */
      render_url?: string;
      /**
       * @description Short descriptor of where the fish can be found.
       * @example River (clifftop)
       */
      location?: string;
      /**
       * @description The size of the fish's shadow.
       * @example Small
       * @enum {string}
       */
      shadow_size?:
        | 'X-Small'
        | 'Small'
        | 'Medium'
        | 'Medium w/Fin'
        | 'Large'
        | 'Large w/Fin'
        | 'X-Large'
        | 'XX-Large'
        | 'Long';
      /**
       * @description How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of fish the player has to have caught before this fish will start spawning.
       * @example 100
       */
      total_catch?: number;
      /**
       * @description The number of Bells the fish can be sold to Nook's store for.
       * @example 1000
       */
      sell_nook?: number;
      /**
       * @description The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.
       * @example 1500
       */
      sell_cj?: number;
      /**
       * Format: float
       * @description The width of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the fish is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.
       * @example [
       *   "I caught a cherry salmon! It's the perfect topper for a marlin sundae!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the fish in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Mar – Jun",
         *     "time": "4 PM – 9 AM"
         *   },
         *   {
         *     "months": "Sep – Nov",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "4 PM – 9 AM",
         *   "4": "4 PM – 9 AM",
         *   "5": "4 PM – 9 AM",
         *   "6": "4 PM – 9 AM",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the fish is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Mar – Jun; Sep – Nov
         */
        months?: string;
        /**
         * @description An array of integers representing the months the fish is available in the Northern hemisphere.
         * @example [
         *   3,
         *   4,
         *   5,
         *   6,
         *   9,
         *   10,
         *   11
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the fish in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Sep – Dec",
         *     "time": "4 PM – 9 AM"
         *   },
         *   {
         *     "months": "Mar – May",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "4 PM – 9 AM",
         *   "4": "4 PM – 9 AM",
         *   "5": "4 PM – 9 AM",
         *   "6": "4 PM – 9 AM",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
          "2'"?: string;
          "3'"?: string;
        };
        /**
         * @description The months the fish is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Mar – May; Sep – Dec
         */
        months?: string;
        /**
         * @description An array of integers representing the months the fish is available in the Southern hemisphere.
         * @example [
         *   3,
         *   4,
         *   5,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
    };
    NHBug: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Grasshopper
       */
      url?: string;
      /**
       * @description Name of the bug.
       * @example Grasshopper
       */
      name?: string;
      /**
       * @description In-game bug number, marking position in the Critterpedia.
       * @example 19
       */
      number?: number;
      /**
       * @description Image of the bug.
       * @example https://dodo.ac/np/images/3/37/Grasshopper_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the bug.
       * @example https://dodo.ac/np/images/1/1d/Grasshopper_NH.png
       */
      render_url?: string;
      /**
       * @description Short descriptor of where the bug can be found.
       * @example On the ground
       */
      location?: string;
      /**
       * @description How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of bug the player has to have caught before this bug will start spawning.
       * @example 0
       */
      total_catch?: number;
      /**
       * @description The number of Bells the bug can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: number;
      /**
       * @description The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
       * @example 240
       */
      sell_flick?: number;
      /**
       * Format: float
       * @description The width of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the bug is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
       * @example [
       *   "I caught a grasshopper! They're a grass act!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the bug in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Jul – Sep",
         *     "time": "8 AM – 5 PM"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "NA",
         *   "2": "NA",
         *   "3": "NA",
         *   "4": "NA",
         *   "5": "NA",
         *   "6": "NA",
         *   "7": "8 AM – 5 PM",
         *   "8": "8 AM – 5 PM",
         *   "9": "8 AM – 5 PM",
         *   "10": "NA",
         *   "11": "NA",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the bug is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Jul – Sep
         */
        months?: string;
        /**
         * @description An array of integers representing the months the bug is available in the Northern hemisphere.
         * @example [
         *   7,
         *   8,
         *   9
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the bug in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "Jan – Mar",
         *     "time": "8 AM – 5 PM"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "8 AM – 5 PM",
         *   "2": "8 AM – 5 PM",
         *   "3": "8 AM – 5 PM",
         *   "4": "NA",
         *   "5": "NA",
         *   "6": "NA",
         *   "7": "NA",
         *   "8": "NA",
         *   "9": "NA",
         *   "10": "NA",
         *   "11": "NA",
         *   "12": "NA"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the bug is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Jan – Mar
         */
        months?: string;
        /**
         * @description An array of integers representing the months the bug is available in the Southern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3
         * ]
         */
        months_array?: number[];
      };
    };
    NHSeaCreature: {
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Octopus_(fish)
       */
      url?: string;
      /**
       * @description Name of the sea creature.
       * @example Octopus
       */
      name?: string;
      /**
       * @description In-game sea creature number, marking position in the Critterpedia.
       * @example 20
       */
      number?: number;
      /**
       * @description Image of the sea creature.
       * @example https://dodo.ac/np/images/5/58/Octopus_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description Render of the sea creature.
       * @example https://dodo.ac/np/images/2/27/Octopus_NH.png
       */
      render_url?: string;
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Medium
       * @enum {string}
       */
      shadow_size?: 'X-Small' | 'Small' | 'Medium' | 'Large' | 'X-Large';
      /**
       * @description Short descriptor of where the sea creature can be found.
       * @example Slow
       * @enum {string}
       */
      shadow_movement?:
        | 'Stationary'
        | 'Very slow'
        | 'Slow'
        | 'Medium'
        | 'Fast'
        | 'Very fast';
      /**
       * @description How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.
       * @example Uncommon
       */
      rarity?: string;
      /**
       * @description The total number of sea creatures the player has to have caught before this sea creature will start spawning.
       * @example 0
       */
      total_catch?: number;
      /**
       * @description The number of Bells the sea creature can be sold to Nook's store for.
       * @example 160
       */
      sell_nook?: number;
      /**
       * Format: float
       * @description The width of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_width?: number;
      /**
       * Format: float
       * @description The length of the tank when the sea creature is placed as a furniture item.
       * @example 1
       */
      tank_length?: number;
      /**
       * @description An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.
       * @example [
       *   "I got an octopus! It can give four hugs at once!"
       * ]
       */
      catchphrases?: string[];
      /** @description When you can catch the sea creature in the Northern hemisphere. */
      north?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "All year",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "All day",
         *   "2": "All day",
         *   "3": "All day",
         *   "4": "All day",
         *   "5": "All day",
         *   "6": "All day",
         *   "7": "All day",
         *   "8": "All day",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "All day"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the sea creature is available for in the Northern hemisphere. If all year, value will be `"All year"`.
         * @example Jul – Sep
         */
        months?: string;
        /**
         * @description An array of integers representing the months the sea creature is available in the Northern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3,
         *   4,
         *   5,
         *   6,
         *   7,
         *   8,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
      /** @description When you can catch the sea creature in the Southern hemisphere. */
      south?: {
        /**
         * @description An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
         * @example [
         *   {
         *     "months": "All year",
         *     "time": "All day"
         *   }
         * ]
         */
        availability_array?: {
          months?: string;
          time?: string;
        }[];
        /**
         * @description An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
         * @example {
         *   "1": "All day",
         *   "2": "All day",
         *   "3": "All day",
         *   "4": "All day",
         *   "5": "All day",
         *   "6": "All day",
         *   "7": "All day",
         *   "8": "All day",
         *   "9": "All day",
         *   "10": "All day",
         *   "11": "All day",
         *   "12": "All day"
         * }
         */
        times_by_month?: {
          1?: string;
          2?: string;
          3?: string;
          4?: string;
          5?: string;
          6?: string;
          7?: string;
          8?: string;
          9?: string;
          10?: string;
          11?: string;
          12?: string;
        };
        /**
         * @description The months the sea creature is available for in the Southern hemisphere. If all year, value will be `"All year"`.
         * @example Jan – Mar
         */
        months?: string;
        /**
         * @description An array of integers representing the months the sea creature is available in the Southern hemisphere.
         * @example [
         *   1,
         *   2,
         *   3,
         *   4,
         *   5,
         *   6,
         *   7,
         *   8,
         *   9,
         *   10,
         *   11,
         *   12
         * ]
         */
        months_array?: number[];
      };
    };
    NHEvent: {
      /**
       * @description The description of the event.
       * @example May Day event begins
       */
      event?: string;
      /**
       * @description The date of the event in YYYY-MM-DD format.
       * @example 2021-05-01
       */
      date?: string;
      /**
       * @description The type of event. "Event" is a festivity the player can take part in. "Nook Shopping" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). "Recipes" refers to the start or end of certain recipes being available. "Birthday" refers to the birthday of a villager or special character.
       * @example Event
       * @enum {string}
       */
      type?: 'Event' | 'Nook Shopping' | 'Recipes' | 'Birthday';
      /**
       * @description Link to the respective Nookipedia article for the event.
       * @example https://nookipedia.com/wiki/May_Day
       */
      url?: string;
    };
    NHArtwork: {
      /**
       * @description Name of the artwork.
       * @example Academic Painting
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Academic_Painting
       */
      url?: string;
      /**
       * @description Whether the artwork has a fake or not.
       * @example true
       */
      has_fake?: boolean;
      /**
       * @description The name of the real-life analog to the artwork.
       * @example Vitruvian Man
       */
      art_name?: string;
      /**
       * @description The type of artwork (either a painting or statue).
       * @example Painting
       * @enum {string}
       */
      art_type?: 'Painting' | 'Statue';
      /**
       * @description The author of the real-life analog to the artwork.
       * @example Leonardo da Vinci
       */
      author?: string;
      /**
       * @description The year that the real-life analog was made. May be an exact year, an estimate ("circa"), or a range.
       * @example circa 1487
       */
      year?: string;
      /**
       * @description The art style of the artwork.
       * @example Pen and ink on paper
       */
      art_style?: string;
      /**
       * @description The number of Bells the artwork may be purchased for.
       * @example 4980
       */
      buy?: number;
      /**
       * @description The number of Bells the artwork can be sold to Nook's store for, when it is genuine.
       * @example 1245
       */
      sell?: number;
      /**
       * @description The availability of the artwork.
       * @example Jolly Redd's Treasure Trawler
       */
      availability?: string;
      /**
       * Format: float
       * @description The width of the artwork.
       * @example 1
       */
      width?: number;
      /**
       * Format: float
       * @description The length of the artwork.
       * @example 1
       */
      length?: number;
      /** @description Information about the genuine version of the artwork. */
      real_info?: {
        /**
         * @description Image of the real artwork.
         * @example https://dodo.ac/np/images/e/e8/Academic_Painting_NH_Icon.png
         */
        image_url?: string;
        /**
         * @description The texture of the artwork. Note that statues will not have a texture (value will be empty string).
         * @example https://dodo.ac/np/images/f/f6/Academic_Painting_NH_Texture.png
         */
        texture_url?: string;
        /**
         * @description The description of the artwork.
         * @example This drawing is based on the "ideal" human-body ratio, as stated in "De architectura." "De architectura" was a treatise by Vitruvius, an architect from the early 1st century BCE.
         */
        description?: string;
      };
      /** @description Information about the fake version of the artwork. If there is no fake, `fake_info`'s value will be `null`. */
      fake_info?: {
        /**
         * @description Image of the fake artwork.
         * @example https://dodo.ac/np/images/4/46/Academic_Painting_%28Fake%29_NH_Icon.png
         */
        image_url?: string;
        /**
         * @description The texture of the artwork. Note that statues will not have a texture (value will be empty string).
         * @example https://dodo.ac/np/images/0/03/Academic_Painting_%28Fake%29_NH_Texture.png
         */
        texture_url?: string;
        /**
         * @description A description of how to identify the fake artwork.
         * @example In the forgery, there is a coffee stain in the top right corner. The forgery also has a key taped to the back of the canvas. If there is no stain and key, it is genuine.
         */
        description?: string;
      };
    };
    NHFurniture: {
      /**
       * @description The name of the furniture.
       * @example Antique Vanity
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Antique_Vanity_(New_Horizons)
       */
      url?: string;
      /**
       * @description The category of item as shown in the player's inventory.
       * @example Housewares
       * @enum {string}
       */
      category?: 'Housewares' | 'Miscellaneous' | 'Wall-mounted';
      /**
       * @description The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
       * @example Antique
       */
      item_series?: string;
      /**
       * @description The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
       * @example
       */
      item_set?: string;
      /**
       * @description A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
       * @example [
       *   "Living Room",
       *   "Expensive"
       * ]
       */
      themes?: string[];
      /**
       * @description The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
       * @example Dresser
       */
      hha_category?: string;
      /**
       * @description The base value that the item provides to a player's Happy Home Academy score when placed in their home.
       * @example 251
       */
      hha_base?: number;
      /**
       * @description The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
       * @example Dresser
       */
      tag?: string;
      /**
       * @description Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.
       * @example false
       */
      lucky?: boolean;
      /**
       * @description The season in which the item is lucky (or "All year" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.
       * @example
       * @enum {string}
       */
      lucky_season?:
        | ''
        | 'All year'
        | 'Spring'
        | 'Summer'
        | 'Autumn'
        | 'Winter';
      /**
       * @description An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
       * @example [
       *   {
       *     "price": 31000,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description The number of Bells the item can be sold to Nook's store for.
       * @example 7750
       */
      sell?: number;
      /**
       * @description The number of variations, between 0 and 8.
       * @example 3
       * @enum {integer}
       */
      variation_total?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
      /**
       * @description The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.
       * @example 0
       * @enum {integer}
       */
      pattern_total?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
      /**
       * @description Whether or not the item is customizable via a crafting table.
       * @example false
       */
      customizable?: boolean;
      /**
       * @description The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
       * @example 0
       */
      custom_kits?: number;
      /**
       * @description The item that needs to be consumed to customize this item. The vast majority are "Customization Kit", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.
       * @example
       */
      custom_kit_type?: string;
      /**
       * @description If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
       * @example
       */
      custom_body_part?: string;
      /**
       * @description If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is "Cushion" as the cushion on the chair may have a pattern applied.
       * @example
       */
      custom_pattern_part?: string;
      /**
       * Format: float
       * @description The number of widthwise grid spaces this item takes up.
       * @example 2
       */
      grid_width?: number;
      /**
       * Format: float
       * @description The number of lengthwise grid spaces this item takes up.
       * @example 1
       */
      grid_length?: number;
      /**
       * Format: float
       * @description The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.
       * @example 15.98677
       */
      height?: number;
      /**
       * @description Whether this item may be placed on the exterior door of the player's house.
       * @example false
       */
      door_decor?: boolean;
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * @description A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have "Table" as a function..
       * @example [
       *   "Dresser"
       * ]
       */
      functions?: (
        | 'Trash'
        | 'Toilet'
        | 'Table'
        | 'Storage'
        | 'Stereo'
        | 'Seating'
        | 'Lighting'
        | 'Instrument'
        | 'Dresser'
        | 'Bed'
        | 'Audio'
      )[];
      /**
       * @description Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Nook's Cranny (Upgraded)",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.
       * @example [
       *   {
       *     "variation": "Brown",
       *     "pattern": "",
       *     "image_url": "https://dodo.ac/np/images/9/9e/Antique_Vanity_%28Brown%29_NH_Icon.png",
       *     "colors": [
       *       "Aqua",
       *       "Brown"
       *     ]
       *   },
       *   {
       *     "variation": "Natural",
       *     "pattern": "",
       *     "image_url": "https://dodo.ac/np/images/a/ab/Antique_Vanity_%28Natural%29_NH_Icon.png",
       *     "colors": [
       *       "Aqua",
       *       "Beige"
       *     ]
       *   },
       *   {
       *     "variation": "Black",
       *     "pattern": "",
       *     "image_url": "https://dodo.ac/np/images/5/55/Antique_Vanity_%28Black%29_NH_Icon.png",
       *     "colors": [
       *       "Aqua",
       *       "Black"
       *     ]
       *   }
       * ]
       */
      variations?: {
        variation?: string;
        pattern?: string;
        image_url?: string;
        colors?: (
          | 'Aqua'
          | 'Beige'
          | 'Black'
          | 'Blue'
          | 'Brown'
          | 'Colorful'
          | 'Gray'
          | 'Green'
          | 'Orange'
          | 'Pink'
          | 'Purple'
          | 'Red'
          | 'White'
          | 'Yellow'
        )[];
      }[];
      /**
       * @description Any additional miscellaneous information about the item, such as a name change from a past update.
       * @example
       */
      notes?: string;
    };
    NHTool: {
      /**
       * @description The name of the tool.
       * @example Axe
       */
      name?: string;
      /**
       * @description Link the the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Axe_(New_Horizons)
       */
      url?: string;
      /**
       * @description How many times the tool can be used before breaking.
       * @example 100
       */
      uses?: number;
      /**
       * @description The base value that the item provides to a player's Happy Home Academy score when placed in their home.
       * @example 0
       */
      hha_base?: number;
      /**
       * @description The number of bells the tool can be sold to the store for.
       * @example 625
       */
      sell?: number;
      /**
       * @description Whether or not the item is customizable via a crafting table.
       * @example false
       */
      customizable?: boolean;
      /**
       * @description The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
       * @example 0
       */
      custom_kits?: number;
      /**
       * @description If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
       * @example
       */
      custom_body_part?: string;
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * @description Any additional miscellaneous information about the item, such as a name change from a past update.
       * @example
       */
      notes?: string;
      /**
       * @description Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Nook's Cranny",
       *     "note": ""
       *   },
       *   {
       *     "from": "Crafting",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
       * @example [
       *   {
       *     "price": 2550
       *   },
       *   {
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.
       * @example [
       *   {
       *     "variation": "",
       *     "image_url": "https://dodo.ac/np/images/f/fa/Axe_NH_Icon.png"
       *   }
       * ]
       */
      variations?: {
        variation?: string;
        image_url?: string;
      }[];
    };
    NHPhoto: {
      /**
       * @description The name of the photo.
       * @example Admiral's Photo
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Admiral's_Photo_(New_Horizons)
       */
      url?: string;
      /**
       * @description The category of item as shown in the player's inventory.
       * @example Accessories
       * @enum {string}
       */
      category?: 'Photos' | 'Posters';
      /**
       * @description The number of Bells the photo can be sold to the store for.
       * @example 10
       */
      sell?: number;
      /**
       * @description Whether or not the item is customizable via a crafting table.
       * @example false
       */
      customizable?: boolean;
      /**
       * @description The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
       * @example 1
       */
      custom_kits?: number;
      /**
       * @description If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
       * @example Frame
       */
      custom_body_part?: string;
      /**
       * @description Whether or not the item can be interacted with. This field is true for all photos and false for all posters.
       * @example true
       */
      interactable?: boolean;
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * Format: float
       * @description The number of widthwise grid spaces this item takes up.
       * @example 2
       */
      grid_width?: number;
      /**
       * Format: float
       * @description The number of lengthwise grid spaces this item takes up.
       * @example 1
       */
      grid_length?: number;
      /**
       * @description Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Friendship",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
       * @example []
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.
       * @example [
       *   {
       *     "variation": "Natural Wood",
       *     "image_url": "https://dodo.ac/np/images/7/72/Admiral%27s_Photo_%28Natural_Wood%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Dark Wood",
       *     "image_url": "https://dodo.ac/np/images/e/e5/Admiral%27s_Photo_%28Dark_Wood%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Pastel",
       *     "image_url": "https://dodo.ac/np/images/9/9a/Admiral%27s_Photo_%28Pastel%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "White",
       *     "image_url": "https://dodo.ac/np/images/1/16/Admiral%27s_Photo_%28White%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Pop",
       *     "image_url": "https://dodo.ac/np/images/b/be/Admiral%27s_Photo_%28Pop%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Colorful",
       *     "image_url": "https://dodo.ac/np/images/5/51/Admiral%27s_Photo_%28Colorful%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Silver",
       *     "image_url": "https://dodo.ac/np/images/e/ed/Admiral%27s_Photo_%28Silver%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   },
       *   {
       *     "variation": "Gold",
       *     "image_url": "https://dodo.ac/np/images/c/cf/Admiral%27s_Photo_%28Gold%29_NH_Icon.png",
       *     "colors": [
       *       "Blue",
       *       "Green"
       *     ]
       *   }
       * ]
       */
      variations?: {
        variation?: string;
        image_url?: string;
        colors?: (
          | 'Aqua'
          | 'Beige'
          | 'Black'
          | 'Blue'
          | 'Brown'
          | 'Colorful'
          | 'Gray'
          | 'Green'
          | 'Orange'
          | 'Pink'
          | 'Purple'
          | 'Red'
          | 'White'
          | 'Yellow'
        )[];
      }[];
    };
    NHClothing: {
      /**
       * @description The name of the clothing.
       * @example 3D Glasses
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:3D_Glasses_(New_Horizons)
       */
      url?: string;
      /**
       * @description The category of item as shown in the player's inventory.
       * @example Accessories
       * @enum {string}
       */
      category?:
        | 'Tops'
        | 'Bottoms'
        | 'Dress-up'
        | 'Headwear'
        | 'Accessories'
        | 'Socks'
        | 'Shoes'
        | 'Bags'
        | 'Umbrellas';
      /**
       * @description The number of Bells the clothing can be sold to the store for.
       * @example 122
       */
      sell?: number;
      /**
       * @description The total number of variations the clothing has, between 0 and 8.
       * @example 2
       * @enum {integer}
       */
      variation_total?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
      /**
       * @description Whether villagers may equip this item.
       * @example true
       */
      vill_equip?: boolean;
      /**
       * @description The time of the year that the clothing is available.
       * @example All year
       */
      seasonality?: string;
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * @description Any additional miscellaneous information about the clothing, such as a name change from a past update.
       * @example
       */
      notes?: string;
      /**
       * @description The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
       * @example [
       *   "Party"
       * ]
       */
      label_themes?: (
        | 'Comfy'
        | 'Everyday'
        | 'Fairy tale'
        | 'Formal'
        | 'Goth'
        | 'Outdoorsy'
        | 'Party'
        | 'Sporty'
        | 'Theatrical'
        | 'Vacation'
        | 'Work'
      )[];
      /**
       * @description The clothing's style(s). Styles are used for gifting villagers.
       * @example [
       *   "Active"
       * ]
       */
      styles?: (
        | 'Active'
        | 'Cool'
        | 'Cute'
        | 'Elegant'
        | 'Gorgeous'
        | 'Simple'
      )[];
      /**
       * @description Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Able Sisters",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
       * @example [
       *   {
       *     "price": 490,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.
       * @example [
       *   {
       *     "variation": "White",
       *     "image_url": "https://dodo.ac/np/images/1/15/3D_Glasses_%28White%29_NH_Icon.png",
       *     "colors": [
       *       "White",
       *       "Colorful"
       *     ]
       *   },
       *   {
       *     "variation": "Black",
       *     "image_url": "https://dodo.ac/np/images/2/28/3D_Glasses_%28Black%29_NH_Icon.png",
       *     "colors": [
       *       "Colorful",
       *       "Black"
       *     ]
       *   }
       * ]
       */
      variations?: {
        variation?: string;
        image_url?: string;
        colors?: (
          | 'Aqua'
          | 'Beige'
          | 'Black'
          | 'Blue'
          | 'Brown'
          | 'Colorful'
          | 'Gray'
          | 'Green'
          | 'Orange'
          | 'Pink'
          | 'Purple'
          | 'Red'
          | 'White'
          | 'Yellow'
        )[];
      }[];
    };
    NHInterior: {
      /**
       * @description The name of the interior.
       * @example Abstract Wall
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Abstract_Wall_(New_Horizons)
       */
      url?: string;
      /**
       * @description Image of the interior.
       * @example https://dodo.ac/np/images/2/2d/Abstract_Wall_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description The category of item as shown in the player's inventory.
       * @example Wallpaper
       * @enum {string}
       */
      category?: 'Floors' | 'Wallpaper' | 'Rugs';
      /**
       * @description The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
       * @example
       */
      item_series?: string;
      /**
       * @description The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
       * @example
       */
      item_set?: string;
      /**
       * @description A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
       * @example [
       *   "Shop",
       *   "Facility"
       * ]
       */
      themes?: string[];
      /**
       * @description The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
       * @example Dresser
       */
      hha_category?: string;
      /**
       * @description The base value that the item provides to a player's Happy Home Academy score when placed in their home.
       * @example 0
       */
      hha_base?: number;
      /**
       * @description The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
       * @example Dresser
       */
      tag?: string;
      /**
       * @description The number of Bells the interior can be sold to Nook's store for.
       * @example 200
       */
      sell?: number;
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * @description Any additional miscellaneous information about the item, such as a name change from a past update.
       * @example
       */
      notes?: string;
      /**
       * Format: float
       * @description The number of widthwise grid spaces this item takes up.
       * @example 2
       */
      grid_width?: number;
      /**
       * Format: float
       * @description The number of lengthwise grid spaces this item takes up.
       * @example 1
       */
      grid_length?: number;
      /**
       * @description (WIP)
       * @example [
       *   "White",
       *   "Colorful"
       * ]
       * @enum {string}
       */
      colors?:
        | 'Aqua'
        | 'Beige'
        | 'Black'
        | 'Blue'
        | 'Brown'
        | 'Colorful'
        | 'Gray'
        | 'Green'
        | 'Orange'
        | 'Pink'
        | 'Purple'
        | 'Red'
        | 'White'
        | 'Yellow';
      /**
       * @description Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Nook's",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
       * @example [
       *   {
       *     "price": 1560,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
    };
    NHItem: {
      /**
       * @description The name of the item.
       * @example Acorn
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Acorn_(New_Horizons)
       */
      url?: string;
      /**
       * @description Image of the interior.
       * @example https://dodo.ac/np/images/9/9f/Acorn_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description How much the item can stack up to in a single inventory slot.
       * @example 30
       */
      stack?: number;
      /**
       * @description The base value that the item provides to a player's Happy Home Academy score when placed in their home.
       * @example 0
       */
      hha_base?: number;
      /**
       * @description The number of bells the item can be sold to Nook's store for.
       * @example 200
       */
      sell?: number;
      /**
       * @description Whether or not the item is a fence or not.
       * @example false
       */
      is_fence?: boolean;
      /**
       * @description (WIP)
       * @example Tree
       * @enum {string}
       */
      material_type?:
        | ''
        | 'Bamboo'
        | 'Mushroom'
        | 'Trash'
        | 'Wood'
        | 'Ore'
        | 'Snowflake'
        | 'Tree'
        | 'Ornament'
        | 'Fruit'
        | 'Underwater'
        | 'Other'
        | 'Leaf'
        | 'Shell'
        | 'Flower'
        | 'Star Fragment'
        | 'Feather'
        | 'Egg'
        | 'Plant';
      /**
       * @description (WIP)
       * @example Autumn
       */
      material_seasonality?: string;
      /**
       * @description (WIP)
       * @example 3
       */
      material_sort?: number;
      /**
       * @description (WIP)
       * @example 0
       */
      material_name_sort?: number;
      /**
       * @description (WIP)
       * @example 3
       */
      material_seasonality_sort?: number;
      /**
       * @description Whether the item is edible or not.
       * @example false
       */
      edible?: boolean;
      /**
       * @description (WIP)
       * @example
       * @enum {string}
       */
      plant_type?: '' | 'Pumpkin' | 'Flower' | 'Bush' | 'Tree';
      /**
       * @description The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
       * @example 1.0.0
       */
      version_added?: string;
      /**
       * @description Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
       * @example true
       */
      unlocked?: boolean;
      /**
       * @description Any additional miscellaneous information about the item, such as a name change from a past update.
       * @example
       */
      notes?: string;
      /**
       * @description Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Nook's",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
       * @example [
       *   {
       *     "price": 280,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
    };
    NHRecipe: {
      /**
       * @description The name of the recipe.
       * @example Flimsy Axe
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Item:Flimsy_Axe_(New_Horizons)
       */
      url?: string;
      /**
       * @description Image of the item the recipe crafts.
       * @example https://dodo.ac/np/images/a/ac/Flimsy_Axe_NH_DIY_Icon.png
       */
      image_url?: string;
      /**
       * @description The unique in-game ID of the recipe.
       * @example 100
       */
      serial_id?: number;
      /**
       * @description An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).
       * @example [
       *   {
       *     "price": 280,
       *     "currency": "Bells"
       *   }
       * ]
       */
      buy?: {
        price?: number;
        currency?: string;
      }[];
      /**
       * @description The number of Bells the sea creature can be sold to Nook's store for.
       * @example 200
       */
      sell?: number;
      /**
       * @description How many recipes the player has to have learned to unlock this one.
       * @example 0
       */
      recipes_to_unlock?: number;
      /**
       * @description Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.
       * @example [
       *   {
       *     "from": "Tom Nook",
       *     "note": "Obtained through Tom Nook's DIY Workshop at the beginning of the game."
       *   },
       *   {
       *     "from": "Nook's Cranny",
       *     "note": ""
       *   }
       * ]
       */
      availability?: {
        from?: string;
        note?: string;
      }[];
      /**
       * @description The list of materials required to craft the item.
       * @example [
       *   {
       *     "name": "Tree Branch",
       *     "count": 5
       *   },
       *   {
       *     "name": "Stone",
       *     "count": 1
       *   }
       * ]
       */
      materials?: {
        name?: string;
        count?: number;
      }[];
    };
    NHIndividualFossil: {
      /**
       * @description The name of the fossil.
       * @example Spino Skull
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Spinosaurus
       */
      url?: string;
      /**
       * @description Image of the fossil's icon.
       * @example https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png
       */
      image_url?: string;
      /**
       * @description The name of the group that the fossil belongs to.
       * @example Spinosaurus
       */
      fossil_group?: string;
      /**
       * @description Whether or not the item can be interacted with.
       * @example false
       */
      interactable?: boolean;
      /**
       * @description The number of bells the item can be sold to Nook's store for.
       * @example 4000
       */
      sell?: number;
      /**
       * @description The base value that the item provides to a player's Happy Home Academy score when placed in their home.
       * @example 87
       */
      hha_base?: number;
      /**
       * @description The width of the fossil.
       * @example 2
       */
      width?: number;
      /**
       * @description The length of the fossil.
       * @example 2
       */
      length?: number;
      /**
       * @example [
       *   "Brown"
       * ]
       */
      colors?: (
        | 'Aqua'
        | 'Beige'
        | 'Black'
        | 'Blue'
        | 'Brown'
        | 'Colorful'
        | 'Gray'
        | 'Green'
        | 'Orange'
        | 'Pink'
        | 'Purple'
        | 'Red'
        | 'White'
        | 'Yellow'
      )[];
    };
    NHFossilGroup: {
      /**
       * @description The name of the fossil group.
       * @example Spinosaurus
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Spinosaurus
       */
      url?: string;
      /**
       * @description The room where the fossil group can be found in the museum's fossil section.
       * @example 2
       */
      room?: number;
      /**
       * @description A description of the fossil group.
       * @example Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.
       */
      description?: string;
    };
    NHFossilGroupWithIndividualFossils: {
      /**
       * @description The name of the fossil group.
       * @example Spinosaurus
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Spinosaurus
       */
      url?: string;
      /**
       * @description The room where the fossil group can be found in the museum's fossil section.
       * @example 2
       */
      room?: number;
      /**
       * @description A description of the fossil group.
       * @example Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.
       */
      description?: string;
      matched?: {
        /**
         * @description If the query given was a fossil group, `group` would be returned. Otherwise, `individual` is returned.
         * @example individual
         */
        type?: string;
        /**
         * @description The name of the fossil or fossil group that matched the given query.
         * @example Spino Skull
         */
        name?: string;
      };
      /**
       * @description An array of objects, each object representing a fossil that belongs to the given group.
       * @example [
       *   {
       *     "name": "Spino Skull",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 4000,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   },
       *   {
       *     "name": "Spino Tail",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 2500,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   },
       *   {
       *     "name": "Spino Torso",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 3000,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   }
       * ]
       */
      fossils?: {
        /** @example Spino Skull */
        name?: string;
        url?: string;
        image_url?: string;
        fossil_group?: string;
        interactable?: boolean;
        sell?: number;
        hha_base?: number;
        width?: number;
        length?: number;
        colors?: (
          | 'Aqua'
          | 'Beige'
          | 'Black'
          | 'Blue'
          | 'Brown'
          | 'Colorful'
          | 'Gray'
          | 'Green'
          | 'Orange'
          | 'Pink'
          | 'Purple'
          | 'Red'
          | 'White'
          | 'Yellow'
        )[];
      }[];
    };
    NHFossilGroupWithIndividualFossilsNoMatched: {
      /**
       * @description The name of the fossil group.
       * @example Spinosaurus
       */
      name?: string;
      /**
       * @description Link to the respective Nookipedia article.
       * @example https://nookipedia.com/wiki/Spinosaurus
       */
      url?: string;
      /**
       * @description The room where the fossil group can be found in the museum's fossil section.
       * @example 2
       */
      room?: number;
      /**
       * @description A description of the fossil group.
       * @example Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.
       */
      description?: string;
      /**
       * @description An array of objects, each object representing a fossil that belongs to the given group.
       * @example [
       *   {
       *     "name": "Spino Skull",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 4000,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   },
       *   {
       *     "name": "Spino Tail",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 2500,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   },
       *   {
       *     "name": "Spino Torso",
       *     "url": "https://nookipedia.com/wiki/Spinosaurus",
       *     "image_url": "https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png",
       *     "interactable": true,
       *     "sell": 3000,
       *     "hha_base": 87,
       *     "width": 2,
       *     "length": 2,
       *     "colors": [
       *       "Brown"
       *     ]
       *   }
       * ]
       */
      fossils?: {
        /** @example Spino Skull */
        name?: string;
        url?: string;
        image_url?: string;
        fossil_group?: string;
        interactable?: boolean;
        sell?: number;
        hha_base?: number;
        width?: number;
        length?: number;
        colors?: (
          | 'Aqua'
          | 'Beige'
          | 'Black'
          | 'Blue'
          | 'Brown'
          | 'Colorful'
          | 'Gray'
          | 'Green'
          | 'Orange'
          | 'Pink'
          | 'Purple'
          | 'Red'
          | 'White'
          | 'Yellow'
        )[];
      }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
